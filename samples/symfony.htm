
<head>
  <meta charset="UTF-8">  
    <link rel="stylesheet" href="../assets/css/block.css">
    <script src="../assets/js/block.js"></script>
    <link rel="stylesheet" href="../libs/highlight/androidstudio2.css">
    <script src="../libs/highlight/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
</head>
<body>
<h1>Symfony</h1>

<script>

var objConcepts=BlockGroup("Concepts");
// Block(options)
// title,body,code,codetype,widt,hei,imageSrc=null,padding="5",imagWidth="100%",parent=document,imagesOnRight=false,codeOnRight=false)

var options=[];

options[0]={title:"symfony",
body:`Symfony is a php web framework 
which is set of reusable <b>components</b>
 and <b>bundles</b>. 
For example, Cache component provides 
cache functionality.`,codetype:"javascript",parent:objConcepts
}

options[1]={title:"Bundle",
body:`A bundle is a  set of all related <b>files within a directory</b> that implement a single feature, including:
  PHP files, templates,stylesheets,JavaScript and tests.
See the 4 bundles In the <b>config\ bundles.php</b> of the following sample :`,
code:`return [
Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle::class =>['all' => true],
Symfony\\Bundle\\WebServerBundle\\ WebServerBundle::class =>['dev' => true],
Symfony\\Bundle\\TwigBundle\\ TwigBundle::class =>['all' => true],
Symfony\\Bundle\\MonologBundle\\ MonologBundle::class =>['all' => true],
];`,
codetype:"php",parent:objConcepts,codeOnRight:true
};

options[2]={title:"The application structure",
body:`A <b>Symfony application</b> itself <b>is a bundle composed of other bundles</b> which is called <b>AppBundle</b>.

Symfony core web-framework is <b>FrameworkBundle</b>
 and there is a bundle called  <b>FrameworkExtraBundle</b> for furthur options.
`,parent:objConcepts
}

options[3]={
    title:"bundles Configurator",
    body:`Enables one or more bundles in the Symfony application by
 appending them to the <b>bundles.php</b> file.
Its value is an associative array where the key is the 
bundle class name and the value is an array of environments 
where it must be enabled.`,
    code:`{
    "bundles": {
        "Symfony\\Bundle\\DebugBundle\\DebugBundle": ["dev", "test"],
        "Symfony\\Bundle\\MonologBundle\\MonologBundle": ["all"]
    }
}`,parent:objConcepts
};

options[4]={
    title:"env Configurator",
    body:`Adds the given list of environment variables 
to the .env and .env.dist files stored in 
the root of the Symfony project:`
,code:`{
    "env": {
        "APP_ENV": "dev"
    }
}` ,parent:objConcepts
}

for(i=0;i<=3;i++)
    Block(options[i]);
    
var objSettingUp=BlockGroup("Setting it Up");
options=[];
options[0]={
   title: "Requirements for Running Symfony",
  body:`Symfony 4.0 requires PHP 7.1.3 or higher to run.,
Symfony 3.4 requires PHP 5.5.9 or higher to run.
to know more requirements,Run:`,
 code:` cd my-project/
 php bin/symfony_requirements`,
 parent:objSettingUp
};
options[1]={
    title:"downloding installler(Windows)",
    body:`First download symfony:
<pre><code>
php -r "file_put_contents('symfony', 
 file_get_contents('https://symfony.com/installer'));"
</code></pre>
and execute the following:
<pre><code>c:\> 
(echo @ECHO OFF & echo php "%~dp0symfony" %*) 
   > symfony.bat
</code></pre>
Then, move both files (symfony and
symfony.bat)to any location included 
in your execution path.
Now you can run the symfony command
anywhere on your system.`,
 parent:objSettingUp
}

options[2]={
    title:"Using the installer",
    body:`Execute the new command and 
provide the name of your project
as the only argument:`,
code:`# Linux, Mac OS X
$ symfony new my_project

# Windows
c:\> php symfony new my_project`,
 parent:objSettingUp
};

options[3]={
    title:"Unistalling",
body:`Symfony on your computer is just a folder 
containing the framework and the structure
of the files, so you can delete that
folder and you are done. Composer is just
an binary file (phar) that can run on the 
command line. 
Locate where that file is and delete it.`,
 parent:objSettingUp
}
options[4]={
    title:"Symfony Flex",
    body:`<a  href="https://github.com/symfony/flex">Symfony Flex</a> is the new way to install and 
manage Symfony applications.
Flex is not a new Symfony version,
but a tool that replaces and improves
the <a  href="https://github.com/symfony/symfony-installer">Symfony Installer</a> and the 
<a href="https://github.com/symfony/symfony-standard">Symfony Standard Edition</a>.`,
    parent:objSettingUp
}
options[5]={
    title:"How Does Flex Work",
    body:`Symfony Flex <h7>is a Composer plugin</h7> that modifies the 
behavior of the require,update, and remove commands. 
When installing or removing dependencies in a Flex-enabled 
application, Symfony can <h7>perform tasks before 
and after the execution</h7> of Composer tasks.`,
parent:objSettingUp
}

options[6]={
    title:"Recipes",
    body:`they allow the automation of Composer 
packages configuration via the
Symfony Flex Composer plugin`,
    parent:objSettingUp
}

options[7]={
    title:"Creating Recipes",
    body:`Symfony recipes consist of a <b>manifest.json</b> 
config file and, optionally,files and directories.
Recipes must be stored on their own repositories,
outside of your Composer package repository.
They must follow the <b>vendor/package/version/ </b>
directory structure, where version is the 
minimum version supported by the recipe.
Directory structure of some Symfony recipes:`,
code:`symfony/
    console/
        3.3/
            bin/
            manifest.json
    framework-bundle/
        3.3/
            config/
            public/
            src/
            manifest.json
    requirements-checker/
        1.0/
            manifest.json`
,parent:objSettingUp
}

options[8]={
    title:"Configurators",
    body:`Recipes define the different tasks executed
 when installing a dependency, such as 
 running commands, copying files or 
 adding new environment variables.
 types of tasks, which are called configurators:`,
 code:`copy-from-recipe, copy-from-package,
 bundles, env, composer-scripts, gitignore,
  and post-install-output`
  ,parent:objSettingUp
}
for(i=0;i<=8;i++)
    Block(options[i]);
</script>
</body>
