<head>
    <!--link rel="stylesheet" href="../../libs/highlight/androidstudio2.css"-->  
    <link rel="stylesheet" href="../assets/css/block.css">  
    <script src="../assets/js/block.js"></script>
    
    <script type="text/javascript" src="react.json"></script>  
  </head>
  <body>
  
  
  <script>
  PageHeaderRow("React.JS");
  NewLine();
  NewLine();
  var options= JSON.parse(JSON.stringify(options));
  
  options= BlockFrame.RenderGrouped(options);
  
</script>
    <br>
<a href="https://codesandbox.io/s/r5w8zk8qzn">
   <img alt="Edit r5w8zk8qzn" src="https://codesandbox.io/static/img/play-codesandbox.svg">
  </a>&nbsp;
<a href="https://codepen.io/bradleyboy/pen/OPBpGw">2nd Example</a> 


<h2>ReactDOM</h2>

  <script>
    BlockFrame.Block("ReactDOM",
  `ReactDOM is the <h7>glue between React and the DOM</h7>.
 Often, you will only use it <h7>for one single thing</h7>: mounting with <h7>ReactDOM.render()</h7>
 Another useful feature of ReactDOM is<h7>ReactDOM.findDOMNode()</h7>
  which you can use to gain direct access to a DOM element.`,
  `var React = require('react'); /* importing react */
var ReactDOM = require('react-dom'); /* importing react-dom */

var MyComponent = React.createClass({
  render: function() {
    return &ltdiv>Hello World&lt/div>;
  }
});

ReactDOM.render(&ltMyComponent />, node);`
  );
  </script>
  
<h2>JSX</h2>

<script>
  BlockFrame.Block("jsx is a syntax",
  `React uses JSX for templating and components instead of regular JavaScript.
   <b>JavaScript XML (JSX)</b> is an extension to the JavaScript language <h7>syntax</h7>. `,`//this isa jsx syntax:
  const element = &lth1>Hello, world!&lt/h1>;`);

  BlockFrame.Block("An example of JSX code:","App.jsx"
  ,`class App extends React.Component {
  render() {
    return (
      &ltdiv>
        &ltp>Header&lt/p>
        &ltp>Content&lt/p>
        &ltp>Footer&lt/p>
      &lt/div>
    );
  }
}`);
</script>

<script>
  BlockFrame.Block("Using JSX","App.jsx", `import React from 'react';
class App extends React.Component {
   render() {
      return (
         &ltdiv>
            Hello World!!!
         &lt/div>
      );
   }
}
export default App;`,"javascript");

BlockFrame.Block("Nested Elements","App.jsx",
 `import React from 'react';
class App extends React.Component {
   render() { return (
         &ltdiv>  &lth1>Header&lt/h1>
            &lth2>Content&lt/h2>
            &ltp>This is the content!!!&lt/p>
         &lt/div>
      );
   }
}
export default App;
`,"javascript");
    
BlockFrame.Block("Attributes",
 `<b>custom attributes</b> are additions to 
 regular HTML properties and attributes.
to add custom attribute,we need to use 
<b>data- prefix</b>.
In the example, we added <b>data-myattribute</b>
as an attribute of p element:`,
      `import React from 'react';
class App extends React.Component {
   render() {
      return (  &ltdiv>
            &lth1>Header&lt/h1>
            &lth2>Content&lt/h2>
            &ltp data-myattribute = "somevalue">
            This is the content!!!&lt/p>
         &lt/div>   );
}  }
export default App;`,"javascript");
  BlockFrame.Block("Expression in an attribute",null,
  `const element =
     &ltimg src={user.avatarUrl}>
     &lt/img>;`);
 BlockFrame.Block("JavaScript Expressions",`JavaScript expressions can be used inside of JSX.
We just need to wrap it with curly brackets {} :`,
`import React from 'react';

class App extends React.Component {
   render() {
      return (
         &ltdiv>
            &lth1>{1+1}&lt/h1>
         &lt/div>
      );
   }
}
export default App;`,"javascript");

BlockFrame.Block("conditional (ternary) expressions",""
,`import React from 'react';
class App extends React.Component {
   render() {
      var i = 1;
      return (
         &ltdiv>
            &lth1>{i == 1 ? 'True!' : 'False'}&lt/h1>
         &lt/div>
      );
   }
}
export default App;`,"javascript");
    
BlockFrame.Block("Styling",
`React recommends using inline styles. 
(with camelCase syntax)
it will automatically append px after 
the number value on specific elements.
<a href="https://codepen.io/ciptohadi/pen/qaHgj">example link</a> ,<h7>Example:</h7>`,
`import React from 'react';
class App extends React.Component {
   render() {
      var myStyle = { fontSize: 100,
         color: '#FF0000'  }
      return (
         &ltdiv>
            &lth1 style = {myStyle}>Header&lt/h1>
         &lt/div>
      );
   }
}
export default App;`,"javascript");
 
BlockFrame.Block("Naming Convention",
`<h7>HTML tags</h7> always use <h7>lowercase tag</h7> names, while <h7>React components start with Uppercase.</h7>
<b>Note</b> − You should use <h7>className</h7> and <h7>htmlFor</h7> as XML attribute names instead of <h7>class</h7> and <h7>for</h7>.`
,null,null );
</script>
    
<h2>Components</h2>
   <p>Components seperate <h7>concerns</h7>, instead of seperating markup and  logic.
      React components are  <h7>written</h7> using <b>JSX</b> or <b>javascript</b>.<a href="https://babeljs.io/repl/#?presets=react&code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA"> play converting them here</a>
    <h3>Sample components:</h3>
    </p>
      <script>
      BlockFrame.Block("(javascript syntax",null,
      `React.createElement(
          MyButton,
          {color:'blue',shadowSize:2}
          ,'Click Me'
        )`);
        BlockFrame.Block("jsx syntax:",null,
        `&ltMyButton color="blue"
            shadowSize={2}>
  Click Me
&lt/MyButton>`);
    BlockFrame.Block("Class components",null,
    `const Username = React.createClass({
  render() {
    return &ltp>The logged in user is: 
     {this.props.username}&lt/p>;
  },
});
// OR:
class Username extends React.Component {
  render() {
    return &ltp>The logged in user is: 
     {this.props.username}&lt/p>;
  }
}`);
BlockFrame.Block("functional stateles component(FSC)","<a href='https://codepen.io/nhab/pen/zJaEMR'>see the code in action</a>",
        `const Username = function(props) {
  return &ltp>The logged in user is:
   {props.username}&lt/p>;
};
// OR :
function Welcome(props) {
  return &lth1>Hello, {props.name}&lt/h1>;
}`);
      </script>
<br>
      <p>
     React components can further be categorized into:
       1- containers/<h7>stateful components</h7>:
         does the work of rendering child components
       and 2- <h7>stateless components</h7> :
         A stateless component’s work is to handle the
       data,event,..receives from its parent component
      </p>
<h7>Stateless Example:</h7><br>
<script>
BlockFrame.Block("App.jsx","App.jsx",
`import React from 'react';
class App extends React.Component {
   render() { return ( &ltdiv>  &ltHeader/> &ltContent/>  &lt/div> ); }
}
class Header extends React.Component {
   render() {return (  &ltdiv> &lth1>Header &lt/h1> &lt/div> );  }
}
class Content extends React.Component {
   render() {  return ( &ltdiv> &lth2>
            Content&lt/h2> &ltp>The content
            text!!!&lt/p> &lt/div>  );  }
}
export default App;`,"javascript");
BlockFrame.Block("main.js",``,
`import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';
ReactDOM.render(<App />, document.getElementById('app'));
`,"php",null,null,'https://www.tutorialspoint.com/reactjs/images/react_components_stateless.jpg');
</script>
<br><h7>Stateful Example</h7><br>
<script>
      BlockFrame.Block("App.jsx","",
`import React from 'react';
class App extends React.Component {
   constructor() {
      super();
      this.state = {
         data:    [{ "id":1,"name":"Foo","age":"20" },
                   { "id":2,"name":"Bar","age":"30" },
                   { "id":3,"name":"Baz","age":"40"}
                  ]  }
   }
   render() { return (
         &ltdiv> &ltHeader/>
            &lttable> &lttbody>
                  {this.state.data.map((person, i) => &ltTableRow key = {i} 
                     data = {person} />)}
             &lt/tbody>&lt/table>
         &lt/div>
      );   }
}
class Header extends React.Component {
   render() {return ( &ltdiv>&lth1>Header&lt/h1>&lt/div> ); }
}
class TableRow extends React.Component {
   render() {return (&lttr>
            &lttd>{this.props.data.id}&lt/td>
            &lttd>{this.props.data.name}&lt/td>
            &lttd>{this.props.data.age}&lt/td>
         &lt/tr>  );   }
}
export default App;`,"php","45%","850px");

BlockFrame.Block('main.js',
null,
`import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';
ReactDOM.render(<App/>, document.getElementById('app'));
`,"javascript","50%","450px",
"https://www.tutorialspoint.com/reactjs/images/react_components_statefull.jpg");
</script>
<h2>State</h2>
<script>
BlockFrame.Block("State",`State is the place where the data comes from.
State is similar to props, but it is private and fully controlled by the component.
<a href="https://codepen.io/gaearon/pen/KgQpJd?editors=0010">
  <img alt="Edit new" src="https://codesandbox.io/static/img/play-codesandbox.svg">
</a>`);

</script>
 <h2>Handling Events </h2>
 <script>
 BlockFrame.Block("Event Handling",
`Handling events with React elements is very similar to handling events on DOM elements. 
There are some syntactic differences:

React events are named using camelCase, rather than lowercase.
With JSX you pass a function as the event handler, rather than a string.
`,
`function ActionLink() {
    function handleClick(e) {
       e.preventDefault();
       console.log('The link was clicked.');
    }
  return (
    &lta href="#" onClick={handleClick}>
      Click me
    &lt/a>
  );
}`);
BlockFrame.Block("Event example2",
`<a href="http://codepen.io/gaearon/pen/xEmzGg?editors=0010">Try it on codePen</a>`,
`class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};

    // This binding is necessary to make 'this' work in the callback
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState(state => ({
      isToggleOn: !state.isToggleOn
    }));
  }

  render() {
    return (
      &ltbutton onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      &lt/button>
    );
  }
}

ReactDOM.render(
  &ltToggle />,
  document.getElementById('root')
);`);
 </script>
 <a href="https://reactjs.org/docs/conditional-rendering.html">-  Read more..</a>
 <a href="https://www.taniarascia.com/getting-started-with-react/">Another good resource..</a>
 <a href="https://medium.freecodecamp.org/learn-react-js-in-5-minutes-526472d292f4">and another..</a>
</body>
